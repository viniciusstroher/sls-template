service: ${opt:stage, self:provider.stage, "dev"}-saipos-tmpl-ts

package:
  individually: true
  exclude:
    - 'src/**'
    - 'build/**'
    - 'tsconfig.json'
    - 'node_modules/**'
    - 'readme.md'

provider:
    name: aws
    # role: arn:aws:iam::091827477872:role/service-role/SQSLambda
    runtime: nodejs12.x
    region: us-west-2
    environment:
      A_QUEUE_OFFLINE: http://sqs:9324/000000000000/${self:custom.aQueueName}
      A_QUEUE: { Ref: AQueue }
    iamRoleStatements:
      - Effect: Allow
        Action:
          - sqs:*
        Resource: 
          Fn::GetAtt: [ AQueue, Arn ]
    websocketsApiRouteSelectionExpression: "$request.body.route"
layers:
  dependenciesNodeModules:
    path: dependencies-layer
    name: ${opt:stage, self:provider.stage, "dev"}-layer-dependencies
    description: Node modules layer # optional, Description to publish to AWS
    compatibleRuntimes: # optional, a list of runtimes this layer is compatible with
      - nodejs12.x
    licenseInfo: GPLv3
    retain: false

  sqs:
    path: utils-layer
    name: ${opt:stage, self:provider.stage, "dev"}-layer-utils
    description: Sqs functions # optional, Description to publish to AWS
    compatibleRuntimes: # optional, a list of runtimes this layer is compatible with
      - nodejs12.x
    licenseInfo: GPLv3
    retain: false

functions:
    lambdaA:
      handler: dist/handlers/a.handler
      events:
          - http:
              path: /a
              method: get
              cors: true
              
      layers:
        #offline aceita paenas arn
        - arn:aws:lambda:us-west-2:859839146142:layer:dev-layer-dependencies:7
        - arn:aws:lambda:us-west-2:859839146142:layer:dev-layer-utils:13
        - { Ref: DependenciesNodeModulesLambdaLayer }
        - { Ref: SqsLambdaLayer }
    
    lambdaB:
      handler: dist/handlers/b.handler
      events:
        - sqs:
          # o problema dava porque o arn tinha 2 tabs (timeout refuse serverless-offline)
          # arn: arn:aws:sqs:elasticmq:000000000000:dev-aqueue.fifo 
            arn: #permissao para acessar a SQS
              Fn::GetAtt:
                - AQueue
                - Arn
            batchSize: 10
      layers:
        - { Ref: DependenciesNodeModulesLambdaLayer }
    
    lambdaC:
      handler: dist/handlers/c.handler
      events:
        - http:
            path: /c
            method: get
            cors: true

      layers:
        - { Ref: DependenciesNodeModulesLambdaLayer }
        - { Ref: SqsLambdaLayer }
    
    #websocket
    connect:
      events:
        - websocket:
            route: $connect
      handler: dist/handlers/d.handler

    disconnect:
      events:
        - websocket:
            route: $disconnect
      handler: dist/handlers/d.handler

    default:
      events:
        - websocket:
            route: $default
            # routeResponseSelectionExpression: $default
      handler: dist/handlers/d.handler
      layers:
        - { Ref: DependenciesNodeModulesLambdaLayer }
        - { Ref: SqsLambdaLayer }
    
    #schedule
    schedule1:
      events:
        - schedule: rate(1 minute)
      handler: dist/handlers/e.handler

resources:
  Resources:
    AQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: ${self:custom.aQueueName}
        FifoQueue: true
        ContentBasedDeduplication: true

custom:
  aQueueName: ${opt:stage, self:provider.stage, "dev"}-aqueue.fifo

  serverless-offline:
    host: 0.0.0.0
    noAuth: true
    noPrependStageInUrl: true
  
  serverless-offline-sqs:
    autoCreate: true                 
    apiVersion: '2012-11-05'
    endpoint: http://sqs:9324
    region: us-west-2
    accessKeyId: root
    secretAccessKey: root
    skipCacheInvalidation: false
    readInterval: 500
plugins:
    - serverless-offline-sqs
    - serverless-offline