service: ${opt:stage, self:provider.stage, "dev"}-saipos-tmpl-ts

provider:
    name: aws
    # role: arn:aws:iam::091827477872:role/service-role/SQSLambda
    runtime: nodejs12.x
    region: us-west-2

layers:
  dependenciesNodeModules:
    path: dependencies-layer
    name: ${opt:stage, self:provider.stage, "dev"}-layer-dependencies
    description: Node modules layer # optional, Description to publish to AWS
    compatibleRuntimes: # optional, a list of runtimes this layer is compatible with
      - nodejs12.x
    licenseInfo: GPLv3
    retain: false

  sqs:
    path: sqs-layer
    name: ${opt:stage, self:provider.stage, "dev"}-layer-sqs
    description: Sqs functions # optional, Description to publish to AWS
    compatibleRuntimes: # optional, a list of runtimes this layer is compatible with
      - nodejs12.x
    licenseInfo: GPLv3
    retain: false

functions:
    lambdaA:
      handler: dist/handlers/a.handler
      events:
          - http:
              path: /
              method: get
              cors: true
      layers:
        - { Ref: DependenciesNodeModulesLambdaLayer }
        - { Ref: SqsLambdaLayer }
    
    # lambdaB:
    #   handler: dist/handlers/b.handler
    #   layers:
    #     - { Ref: DependenciesNodeModulesLambdaLayer }

resources:
  Resources:
    AQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "AQueue"

plugins:
    - serverless-offline