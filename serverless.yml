service: ${opt:stage, self:provider.stage, "dev"}-saipos-tmpl-ts

package:
  individually: true
  exclude:
    - 'src/**'
    - 'build/**'
    - 'tsconfig.json'
    - 'node_modules/**'
    - 'readme.md'

provider:
    name: aws
    # role: arn:aws:iam::091827477872:role/service-role/SQSLambda
    runtime: nodejs12.x
    region: us-west-2
    environment:
      A_QUEUE: { Ref: AQueue }
    iamRoleStatements:
      - Effect: Allow
        Action:
          - sqs:*
        Resource: 
          Fn::GetAtt: [ AQueue, Arn ]

layers:
  dependenciesNodeModules:
    path: dependencies-layer
    name: ${opt:stage, self:provider.stage, "dev"}-layer-dependencies
    description: Node modules layer # optional, Description to publish to AWS
    compatibleRuntimes: # optional, a list of runtimes this layer is compatible with
      - nodejs12.x
    licenseInfo: GPLv3
    retain: false

  sqs:
    path: utils-layer
    name: ${opt:stage, self:provider.stage, "dev"}-layer-utils
    description: Sqs functions # optional, Description to publish to AWS
    compatibleRuntimes: # optional, a list of runtimes this layer is compatible with
      - nodejs12.x
    licenseInfo: GPLv3
    retain: false

functions:
    # lambdaA:
    #   handler: dist/handlers/a.handler
    #   events:
    #       - http:
    #           path: /
    #           method: get
    #           cors: true
              
    #   layers:
    #     #offline aceita paenas arn
    #     - arn:aws:lambda:us-west-2:859839146142:layer:dev-layer-dependencies:7
    #     - arn:aws:lambda:us-west-2:859839146142:layer:dev-layer-utils:13
    #     - { Ref: DependenciesNodeModulesLambdaLayer }
    #     - { Ref: SqsLambdaLayer }
    
    # lambdaB:
    #   handler: dist/handlers/b.handler
    #   events:
    #     - sqs: 
    #         arn: #permissao para acessar a SQS
    #           Fn::GetAtt:
    #             - AQueue
    #             - Arn
    #   layers:
    #     - { Ref: DependenciesNodeModulesLambdaLayer }
    
    lambdaC:
      handler: dist/handlers/c.handler
      events:
        - http:
            path: /
            method: get
            cors: true
        # por algum motivo nao acha o sqs e da pau rever a url do server-offline-sqs! refused
        # - sqs: 
        #     arn: #permissao para acessar a SQS
        #       Fn::GetAtt:
        #         - AQueue
        #         - Arn
      layers:
        - { Ref: DependenciesNodeModulesLambdaLayer }
        - { Ref: SqsLambdaLayer }

resources:
  Resources:
    AQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: ${opt:stage, self:provider.stage, "dev"}-aqueue.fifo
        FifoQueue: true
        ContentBasedDeduplication: true
custom:
  serverless-offline-sqs:
      autoCreate: true                 
      apiVersion: '2012-11-05'
      endpoint: http://sqs:9324
      region: us-west-2
      accessKeyId: root
      secretAccessKey: root
      skipCacheInvalidation: false
  serverless-offline:
    host: 0.0.0.0
    noAuth: true
    noPrependStageInUrl: true
  

plugins:
    - serverless-offline-sqs
    - serverless-offline